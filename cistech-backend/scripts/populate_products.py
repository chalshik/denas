import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import random
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.services.product_service import ProductService
from app.schemas.product import ProductCreateComplete, CharacteristicInput, ProductImageInput, VariationInput, VariationImageInput
from scripts.date import CONSTRUCTION_PRODUCTS

def create_product_from_template(product_template: dict) -> ProductCreateComplete:
    """–°–æ–∑–¥–∞—Ç—å ProductCreateComplete –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    characteristics = []
    for char in product_template.get("characteristics", []):
        characteristics.append(CharacteristicInput(
            type_name=char["type_name"],
            value=char["value"]
        ))
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = []
    for img in product_template.get("images", []):
        images.append(ProductImageInput(
            url=img["url"],
            alt_text=img["alt_text"],
            order=img["order"]
        ))
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
    variations = []
    for var in product_template.get("variations", []):
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
        var_characteristics = []
        for char in var.get("characteristics", []):
            var_characteristics.append(CharacteristicInput(
                type_name=char["type_name"],
                value=char["value"]
            ))
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏
        var_images = []
        for img in var.get("images", []):
            var_images.append(VariationImageInput(
                url=img["url"],
                alt_text=img["alt_text"],
                order=img["order"]
            ))
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é
        variations.append(VariationInput(
            name=var["name"],
            price=var["price"],
            quantity=var["quantity"],
            characteristics=var_characteristics,
            images=var_images
        ))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    return ProductCreateComplete(
        name=product_template["name"],
        description=product_template["description"],
        category_id=product_template["category_id"],
        price=product_template["price"],
        quantity=product_template["quantity"],
        main_image_url=product_template["main_image_url"],
        filter_option_ids=product_template.get("filter_option_ids", []),
        images=images,
        characteristics=characteristics,
        variations=variations,
        status='approved'  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å approved
    )

def populate_100_products():
    """–î–æ–±–∞–≤–∏—Ç—å 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    db = SessionLocal()
    product_service = ProductService(db)
    
    try:
        print("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        vendor_profile_id = "20"
        
        created_count = 0
        failed_count = 0
        
        for i in range(100):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                random_product = random.choice(CONSTRUCTION_PRODUCTS)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                variations = [
                    f"{random_product['name']} #{i+1}",
                    f"{random_product['name']} (–ö–æ–ø–∏—è {i+1})",
                    f"{random_product['name']} - –í–∞—Ä–∏–∞–Ω—Ç {i+1}",
                    f"{random_product['name']} –°–µ—Ä–∏—è {i+1}"
                ]
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                product_copy = random_product.copy()
                product_copy["name"] = random.choice(variations)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –∫ —Ü–µ–Ω–µ (¬±10%)
                price_variation = random.uniform(0.9, 1.1)
                product_copy["price"] = round(product_copy["price"] * price_variation, 2)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (¬±50%)
                quantity_variation = random.uniform(0.5, 1.5)
                product_copy["quantity"] = max(1, int(product_copy["quantity"] * quantity_variation))
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –ø—Ä–æ–¥—É–∫—Ç–∞
                product_schema = create_product_from_template(product_copy)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                product = product_service.create_complete(product_schema, vendor_profile_id)
                created_count += 1
                
                print(f"‚úÖ [{created_count}/100] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_copy['name']}")
                
            except Exception as e:
                failed_count += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ #{i+1}: {str(e)}")
                continue
        
        print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {created_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {failed_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        db.rollback()
    finally:
        db.close()

def simple_populate_100():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ (–ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –ë–î)"""
    from app.models.product.product import Product, ProductVariation
    from app.models.product.characteristic import CharacteristicType, ProductCharacteristic, VariationCharacteristic
    from app.models.product.image import ProductImage, VariationImage
    from app.models.product.filter import product_filters
    from sqlalchemy import insert
    
    db = SessionLocal()
    
    try:
        print("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 100 —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –ë–î)...")
        vendor_profile_id = 20
        created_count = 0
        
        for i in range(100):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                random_product = random.choice(CONSTRUCTION_PRODUCTS)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                unique_name = f"{random_product['name']} #{i+1}"
                
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç
                product = Product(
                    name=unique_name,
                    description=random_product["description"],
                    category_id=random_product["category_id"],
                    price=round(random_product["price"] * random.uniform(0.9, 1.1), 2),
                    quantity=max(1, int(random_product["quantity"] * random.uniform(0.5, 1.5))),
                    vendor_profile_id=vendor_profile_id,
                    main_image_url=random_product["main_image_url"],
                    status='approved'  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å approved
                )
                
                db.add(product)
                db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                for char in random_product.get("characteristics", []):
                    # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    char_type = db.query(CharacteristicType).filter(
                        CharacteristicType.name == char["type_name"]
                    ).first()
                    if not char_type:
                        char_type = CharacteristicType(name=char["type_name"])
                        db.add(char_type)
                        db.flush()
                    
                    # –°–æ–∑–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_char = ProductCharacteristic(
                        product_id=product.id,
                        characteristic_type_id=char_type.id,
                        value=char["value"]
                    )
                    db.add(product_char)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
                for img in random_product.get("images", []):
                    product_image = ProductImage(
                        product_id=product.id,
                        url=img["url"],
                        alt_text=img["alt_text"],
                        order=img["order"]
                    )
                    db.add(product_image)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
                for var in random_product.get("variations", []):
                    variation = ProductVariation(
                        product_id=product.id,
                        name=var["name"],
                        price=round(var["price"] * random.uniform(0.9, 1.1), 2),
                        quantity=max(1, int(var["quantity"] * random.uniform(0.5, 1.5))),
                        status='approved'  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å approved
                    )
                    db.add(variation)
                    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –≤–∞—Ä–∏–∞—Ü–∏–∏
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
                    for char in var.get("characteristics", []):
                        char_type = db.query(CharacteristicType).filter(
                            CharacteristicType.name == char["type_name"]
                        ).first()
                        if not char_type:
                            char_type = CharacteristicType(name=char["type_name"])
                            db.add(char_type)
                            db.flush()
                        
                        var_char = VariationCharacteristic(
                            variation_id=variation.id,
                            characteristic_type_id=char_type.id,
                            value=char["value"]
                        )
                        db.add(var_char)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏
                    for img in var.get("images", []):
                        var_image = VariationImage(
                            variation_id=variation.id,
                            url=img["url"],
                            alt_text=img["alt_text"],
                            order=img["order"]
                        )
                        db.add(var_image)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                for filter_option_id in random_product.get("filter_option_ids", []):
                    db.execute(insert(product_filters).values(
                        product_id=product.id,
                        filter_option_id=filter_option_id
                    ))
                
                created_count += 1
                print(f"‚úÖ [{created_count}/100] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {unique_name}")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                if created_count % 10 == 0:
                    db.commit()
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {created_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ #{i+1}: {e}")
                db.rollback()
                continue
        
        db.commit()
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤!")
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
    print("1. –ß–µ—Ä–µ–∑ ProductService (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –ë–î")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        populate_100_products()
    elif choice == "2":
        simple_populate_100()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ ProductService...")
        populate_100_products()